// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazor.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using blazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\milic\Desktop\blazor\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\milic\Desktop\blazor\Pages\Convertor.razor"
using blazor.Components;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/convertor")]
    public partial class Convertor : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 68 "C:\Users\milic\Desktop\blazor\Pages\Convertor.razor"
       
 
    String x1,x2;
    String Inputvalue;
    private string Result; 
    private string myVar1, myVar2;
    private string z="";
    int CheckD;
    public string Type1
    {
        get { return myVar1; }
        set
        {
            myVar1 = value;
            Method1();
        }
    }
    private void Method1()
    {
       if (myVar1=="Decimal") {x1="D";}
       else if (myVar1=="Binary") {x1="B";}
       else if (myVar1=="Hexadecimal") {x1="H";}
    }
    public string Type2
    {
        get { return myVar2; }
        set
        {
            myVar2 = value;
            Method2();
        }
    }
    private void Method2()
    {
       if (myVar2=="Decimal") {x2="D";}
       else if (myVar2=="Binary") {x2="B";}
       else if (myVar2=="Hexadecimal") {x2="H";}
    }

    static bool isbin(string s)
    {
    foreach (var c in s)
        if (c != '0' && c != '1')
            return false;
    return true;
    }
    public void Obracun ( )
    
    {
        if ( x1=="D" && x2=="D") {
            if (int.TryParse(Inputvalue, out CheckD) ){
                Result=Inputvalue; 
                z="";    
            }
            else{
                Result="";
                z="Not a whole decimal number! Try again!";
            }
        }
        else if ( x1=="D" && x2=="B") {
            if (int.TryParse(Inputvalue, out CheckD) ){
                Result=Convert.ToString(int.Parse(Inputvalue), 2); 
                z="";    
            }
            else{
                Result="";
                z="Not a whole decimal number! Try again!";
            }
        }
        else if  ( x1=="D" && x2=="H") {      
            if (int.TryParse(Inputvalue, out CheckD) ){
                Result=Convert.ToString(int.Parse(Inputvalue), 16);
                z="";    
            }
            else{
                Result="";
                z="Not a whole decimal number! Try again!";
            }
        }
        else if  ( x1=="B" && x2=="D") {   
           if (isbin(Inputvalue))
            {
                Result=Convert.ToString(Convert.ToInt32(Inputvalue, 2)); 
                z="";    
            }
            else{
                Result="";
                z="Not a binary number! Try again!";
            }
        }
        else if  ( x1=="B" && x2=="B") {
            if (isbin(Inputvalue))
            {
                Result="TBD"; 
                z="";    
            }
            else{
                Result="";
                z="Not a binary number! Try again!";
            }
        }
        else if ( x1=="B" && x2=="H") {   
            if (isbin(Inputvalue))
            {
                Result=Convert.ToString(Convert.ToInt32(Inputvalue, 2), 16); ; 
                z="";    
            }
            else{
                Result="";
                z="Not a binary number! Try again!";
            }
        }
        else if  ( x1=="H" && x2=="D") {    
            if (int.TryParse(Inputvalue, NumberStyles.HexNumber, CultureInfo.InvariantCulture,out int dummy)){
                Result=Convert.ToString(Convert.ToInt32(Inputvalue, 16)); 
                z="";    
            }
            else{
                Result="";
                z="Not a hexadecimal number! Try again!";
            }

        }
        else if  ( x1=="H" && x2=="B") {
            if (int.TryParse(Inputvalue, NumberStyles.HexNumber, CultureInfo.InvariantCulture,out int dummy)){
                Result=Convert.ToString(Convert.ToInt32(Inputvalue, 16), 2); 
                z="";    
            }
            else{
                Result="";
                z="Not a hexadecimal number! Try again!";
            }

        }
        else if ( x1=="H" && x2=="H") {
            if (int.TryParse(Inputvalue, NumberStyles.HexNumber, CultureInfo.InvariantCulture,out int dummy)){
                Result=Inputvalue; 
                z="";    
            }
            else{
                Result="";
                z="Not a hexadecimal number! Try again!";
            }
        }
      
    }
 
 

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
